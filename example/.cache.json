{
    "config": {
        "name": "Site Name Here",
        "url": "http://example.com",
        "author": {
            "name": "Author Name here",
            "email": "yourname@exmaple.com"
        },
        "tags": [
            "kizz",
            "github",
            "jade",
            "博客"
        ],
        "comments": null,
        "tracker": null,
        "plugins": [
            "kizz-markdown",
            "kizz-guess-tags"
        ],
        "theme": "kizz-theme-paper",
        "log": "debug"
    },
    "files": [
        {
            "path": "content/README.md",
            "extname": ".md",
            "dirname": "content",
            "basename": "README",
            "modifiedTime": "2014-07-20T13:21:33.000Z",
            "createTime": "2014-06-22T06:03:07.000Z",
            "content": "<h1 id=\"kizz\">kizz</h1>\n<p>Relaxing blog system / static site generator</p>\n<p>If there’s one word to describe kizz, it is relax.</p>\n<h2 id=\"status\">Status</h2>\n<p>Still coding. The alpha version may come out this summer.</p>\n<h2 id=\"features\">Features</h2>\n<ul>\n<li><p>Static</p>\n<p>纯静态的博客系统。</p></li>\n<li><p>Everything is a NPM package</p>\n<p>The plugins, theme are all npm packages. And thus you can simply npm update to update theme, and you can use your favorite nodejs packages via npm.</p></li>\n<li><p>Pandoc / MultiMarkdown Support</p>\n<p>Will use pandoc if avaliable, otherwise Marked will be the Markdown Engine.</p></li>\n<li><p>Emacs Org Support</p>\n<p>Emacs Org to HTML via Eamcs Lisp. See https://github.com/zenozeng/kizz-org</p></li>\n<li><p>Compiler Cache</p>\n<p>Only the changed files will be compiled.</p></li>\n<li><p>FileSystem Based Generator</p>\n<p>Use file's modified timestamp and filename for date and title 目录结构会被保留。 用你最喜欢的方式组织你的文件吧，那同时也是你的URL构成方式。</p></li>\n<li><p>Global Tags</p>\n<p>No need to write tags in a markdown file, simply define global tags, and kizz will automatically figure out tags for each file. This is based on the content and path of each file. And great thanks to NaturalNode's general natural language facilities.</p></li>\n<li><p>Powerful Theme System</p>\n<p>A theme is also a middleware (like plugins). You can use your favorite templating engine (Jade, Swig, HAML and etc.) Simply define it in package.json's dependency and require it in your theme/index.js.</p>\n<p>Example: https://github.com/zenozeng/kizz-theme-paper</p></li>\n</ul>\n<h2 id=\"features-of-default-theme\">Features of default theme</h2>\n<ul>\n<li><p>Search Support</p>\n<p>Frontend powered search support</p></li>\n<li><p>Atom Feed</p></li>\n<li><p>Syntax Highlight</p></li>\n</ul>\n<h2 id=\"usage\">Usage</h2>\n<h3 id=\"build\">Build</h3>\n<pre><code>kizz build</code></pre>\n<h3 id=\"preview\">Preview</h3>\n<pre><code>sudo npm install http-server -g\nhttp-server ./public -p 8080</code></pre>\n<h3 id=\"update\">Update</h3>\n<h4 id=\"update-plugins-theme\">Update Plugins &amp; Theme</h4>\n<pre><code>npm update</code></pre>\n<h4 id=\"update-kizz\">Update Kizz</h4>\n<pre><code>sudo npm update -g kizz</code></pre>\n<h2 id=\"standerd-object\">Standerd object</h2>\n<h3 id=\"file-object\">File Object</h3>\n<pre class=\"sourceCode javascript\"><code class=\"sourceCode javascript\">{\n    <span class=\"st\">&quot;path&quot;</span>: <span class=\"st\">&quot;filepath&quot;</span>,\n    <span class=\"st\">&quot;mtime&quot;</span>: <span class=\"st\">&quot;modified time (Date Object)&quot;</span>,\n    <span class=\"st\">&quot;extname&quot;</span>: <span class=\"st\">&quot;extname&quot;</span>, <span class=\"co\">// &quot;.md&quot;</span>\n    <span class=\"st\">&quot;dirname&quot;</span>: <span class=\"st\">&quot;dirname&quot;</span>,\n    <span class=\"st\">&quot;basename&quot;</span>: <span class=\"st\">&quot;basename&quot;</span>\n    <span class=\"st\">&quot;content&quot;</span>: <span class=\"st\">&quot;html&quot;</span>, <span class=\"co\">// after kizz-markdown</span>\n    <span class=\"st\">&quot;title&quot;</span>: <span class=\"st\">&quot;title&quot;</span>, <span class=\"co\">// after kizz-markdown</span>\n    <span class=\"st\">&quot;link&quot;</span>: <span class=\"st\">&quot;link for the post (optional)&quot;</span>,\n    <span class=\"st\">&quot;tags&quot;</span>: [<span class=\"st\">&quot;tag1&quot;</span>, <span class=\"st\">&quot;tag2&quot;</span>] <span class=\"co\">// after kizz-guess-tags-en</span>\n}</code></pre>\n<h2 id=\"faq\">FAQ</h2>\n<h3 id=\"why-generator-functions\">Why Generator Functions?</h3>\n<p>TODO</p>\n<h3 id=\"为什么文章顶部没有类似-jekyll-的配置-yaml\">为什么文章顶部没有类似 Jekyll 的配置 yaml？</h3>\n<p>个人认为这样打乱写作的纯粹性。 这些繁琐的东西应该交给程序自己去管理。</p>\n<h3 id=\"与-farbox-的不同\">与 Farbox 的不同？</h3>\n<ul>\n<li><p>Kizz 任然定位成一个静态站点生成器，而非托管平台。</p>\n<p>本地编译意味着可以更加方便地调用本地命令</p></li>\n<li><p>Kizz 重度耦合 npm、co</p>\n<p>一切皆为 NPM 包，重度使用 generators。</p></li>\n<li><p>Kizz 以我自己为目标用户</p>\n<p>我是个懒惰的程序员，却又想要有一些灵活可定制的个人 blog 与 wiki 之类的。</p></li>\n<li><p>开放的插件系统</p>\n<p>Kizz 的核心只是一个插件加载器，基本功能皆是通过插件而来， 这同时也意味着，插件可以拥有很高的自由度， 成为整个编译的中间件之一。</p></li>\n</ul>\n",
            "title": "kizz",
            "tags": [
                "kizz",
                "github",
                "jade",
                "博客"
            ]
        },
        {
            "path": "content/test/linktest.md",
            "extname": ".md",
            "dirname": "content/test",
            "basename": "linktest",
            "modifiedTime": "2014-07-20T13:21:33.000Z",
            "createTime": "2014-07-20T13:21:33.000Z",
            "content": "<p>跨平台 CSS 中文字体解决方案</p>\n",
            "title": "linktest",
            "tags": [
                "css",
                "fonts",
                "project",
                "github"
            ],
            "link": "https://github.com/zenozeng/fonts.css"
        },
        {
            "path": "content/test/sub/helloworld.md",
            "extname": ".md",
            "dirname": "content/test/sub",
            "basename": "helloworld",
            "modifiedTime": "2014-07-20T04:38:49.000Z",
            "createTime": "2014-07-20T04:38:49.000Z",
            "content": "<h1 id=\"hello-world\">Hello World</h1>\n<p>Hello Kizz!</p>\n",
            "title": "Hello World",
            "tags": [
                "kizz"
            ]
        },
        {
            "path": "content/doc/middleware-guild.md",
            "extname": ".md",
            "dirname": "content/doc",
            "basename": "middleware-guild",
            "modifiedTime": "2014-07-20T04:02:11.000Z",
            "createTime": "2014-07-19T12:27:20.000Z",
            "content": "<h1 id=\"middleware-guide\">Middleware Guide</h1>\n<h2 id=\"create-plugin\">create plugin</h2>\n<pre><code>mkdir kizz-helloworld\ncd kizz-helloworld</code></pre>\n<h3 id=\"create-package.json\">create package.json</h3>\n<pre><code>npm init</code></pre>\n<h3 id=\"create-index.js\">create index.js</h3>\n<pre><code>gedit index.js</code></pre>\n<pre class=\"sourceCode javascript\"><code class=\"sourceCode javascript\"><span class=\"ot\">module</span>.<span class=\"fu\">exports</span> = <span class=\"kw\">function</span>(app) {\n    <span class=\"ot\">app</span>.<span class=\"fu\">when</span>(<span class=\"kw\">function</span> *() {\n        <span class=\"kw\">return</span> <span class=\"kw\">true</span>;\n    }).<span class=\"fu\">use</span>(<span class=\"kw\">function</span> *(next) {\n        <span class=\"ot\">console</span>.<span class=\"fu\">log</span>(<span class=\"st\">&quot;Hello World&quot;</span>);\n        <span class=\"kw\">yield</span> next;\n    });\n}</code></pre>\n<h3 id=\"npm-link\">npm link</h3>\n<pre><code>cd myblog\nmkdir -p node_modules # create node_modules if not exists\nsudo npm link ~/code/kizz-helloworld/</code></pre>\n<h3 id=\"update-config\">update config</h3>\n<pre><code>plugins:\n    - kizz-helloworld</code></pre>\n",
            "title": "Middleware Guide",
            "tags": [
                "kizz"
            ]
        },
        {
            "path": "content/doc/关于 generator.md",
            "extname": ".md",
            "dirname": "content/doc",
            "basename": "关于 generator",
            "modifiedTime": "2014-07-20T13:21:33.000Z",
            "createTime": "2014-07-20T13:21:33.000Z",
            "content": "<h1 id=\"关于-generator\">关于 Generator</h1>\n<h2 id=\"跳出流程控制\">跳出流程控制</h2>\n<p>一个函数控制整个流程。 当然用传统的方式也是可以做到的。</p>\n<h3 id=\"callback-version\">callback version</h3>\n<pre class=\"sourceCode javascript\"><code class=\"sourceCode javascript\"><span class=\"ot\">app</span>.<span class=\"fu\">use</span>(context, next) {\n    <span class=\"co\">// do sth</span>\n    <span class=\"kw\">var</span> afterNext = <span class=\"kw\">function</span>() {\n        <span class=\"co\">// do sth later</span>\n    }\n    <span class=\"fu\">next</span>(context, afterNext);\n}</code></pre>\n<h3 id=\"promise-versioin\">promise versioin</h3>\n<pre class=\"sourceCode javascript\"><code class=\"sourceCode javascript\"><span class=\"ot\">app</span>.<span class=\"fu\">use</span>(context, next) {\n    <span class=\"co\">// do sth</span>\n    <span class=\"co\">// next take context &amp; generate a new promise</span>\n    <span class=\"fu\">next</span>(context).<span class=\"fu\">then</span>(<span class=\"kw\">function</span>() {\n        <span class=\"co\">// do sth later</span>\n    });\n}</code></pre>\n<h2 id=\"异步到同步的转变\">异步到同步的转变</h2>\n<p><code>co</code> 这个库简化了异步的书写、提供了真正能用的 try catch 支持。 脱离了大量的 callback，代码就变得直白了起来。 （关于 Error Handle，NodeJS也提供了这个：http://nodejs.org/api/domain.html）</p>\n<p>官方的例子：</p>\n<pre class=\"sourceCode javascript\"><code class=\"sourceCode javascript\"><span class=\"kw\">var</span> co = <span class=\"fu\">require</span>(<span class=\"st\">&#39;co&#39;</span>);\n<span class=\"kw\">var</span> thunkify = <span class=\"fu\">require</span>(<span class=\"st\">&#39;thunkify&#39;</span>);\n<span class=\"kw\">var</span> request = <span class=\"fu\">require</span>(<span class=\"st\">&#39;request&#39;</span>);\n<span class=\"kw\">var</span> get = <span class=\"fu\">thunkify</span>(<span class=\"ot\">request</span>.<span class=\"fu\">get</span>);\n\n<span class=\"fu\">co</span>(<span class=\"kw\">function</span> *(){\n  <span class=\"kw\">var</span> a = <span class=\"kw\">yield</span> <span class=\"fu\">get</span>(<span class=\"st\">&#39;http://google.com&#39;</span>);\n  <span class=\"kw\">var</span> b = <span class=\"kw\">yield</span> <span class=\"fu\">get</span>(<span class=\"st\">&#39;http://yahoo.com&#39;</span>);\n  <span class=\"kw\">var</span> c = <span class=\"kw\">yield</span> <span class=\"fu\">get</span>(<span class=\"st\">&#39;http://cloudup.com&#39;</span>);\n  <span class=\"ot\">console</span>.<span class=\"fu\">log</span>(a[<span class=\"dv\">0</span>].<span class=\"fu\">statusCode</span>);\n  <span class=\"ot\">console</span>.<span class=\"fu\">log</span>(b[<span class=\"dv\">0</span>].<span class=\"fu\">statusCode</span>);\n  <span class=\"ot\">console</span>.<span class=\"fu\">log</span>(c[<span class=\"dv\">0</span>].<span class=\"fu\">statusCode</span>);\n})()\n\n<span class=\"fu\">co</span>(<span class=\"kw\">function</span> *(){\n  <span class=\"kw\">var</span> a = <span class=\"fu\">get</span>(<span class=\"st\">&#39;http://google.com&#39;</span>);\n  <span class=\"kw\">var</span> b = <span class=\"fu\">get</span>(<span class=\"st\">&#39;http://yahoo.com&#39;</span>);\n  <span class=\"kw\">var</span> c = <span class=\"fu\">get</span>(<span class=\"st\">&#39;http://cloudup.com&#39;</span>);\n  <span class=\"kw\">var</span> res = <span class=\"kw\">yield</span> [a, b, c];\n  <span class=\"ot\">console</span>.<span class=\"fu\">log</span>(res);\n})()\n\n<span class=\"co\">// Error handling</span>\n\n<span class=\"fu\">co</span>(<span class=\"kw\">function</span> *(){\n  <span class=\"kw\">try</span> {\n    <span class=\"kw\">var</span> res = <span class=\"kw\">yield</span> <span class=\"fu\">get</span>(<span class=\"st\">&#39;http://badhost.invalid&#39;</span>);\n    <span class=\"ot\">console</span>.<span class=\"fu\">log</span>(res);\n  } <span class=\"kw\">catch</span>(e) {\n    <span class=\"ot\">console</span>.<span class=\"fu\">log</span>(<span class=\"ot\">e</span>.<span class=\"fu\">code</span>) <span class=\"co\">// ENOTFOUND</span>\n }\n})()</code></pre>\n",
            "title": "关于 Generator",
            "tags": []
        }
    ],
    "time": "2014-07-27T10:55:22.796Z"
}